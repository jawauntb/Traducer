{"version":3,"sources":["translate.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","enteringNewPhrase","handleClick","bind","assertThisInitialized","setState","loadContent","buttonText","headerText","react_default","a","createElement","App_InputForm","App_Table","class","App_Navbar","App_SiteHeader","App_Footer","Component","Navbar","id","App_NavHeader","onClick","NavHeader","type","data-toggle","data-target","src","translate","SiteHeader","InputForm","_this2","value","handleChange","handleSubmit","event","target","text_in","JSON","stringify","input_text","language","output_text","alert","fetch","method","headers","Accept","Content-Type","body","preventDefault","role","onSubmit","onChange","rows","required","Table","translations","res","json","console","log","_context","t0","map","item","key","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b0c96c79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/translate.e327b575.svg\";","import React, { Component } from 'react';\nimport translate from './translate.svg';\n// import './App.css';\nimport ReactDOM from 'react-dom';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enteringNewPhrase: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n\n  handleClick() {\n    if (this.state.enteringNewPhrase === true) {\n      this.setState({enteringNewPhrase: false});\n    } else {\n      this.setState({enteringNewPhrase: true});\n    }\n  }\n\n\n  render() {\n\n    var loadContent;\n    var buttonText;\n    var headerText;\n    if (this.state.enteringNewPhrase === true) {\n      loadContent = <InputForm />;\n      buttonText = \"See Past Translations\";\n      headerText = <p>Click the button in the navbar to see every translation on record!</p>;\n    } else {\n      loadContent = <Table />;\n      buttonText = \"Translate Into English\";\n      headerText = <p>Click the button in the navbar to translate text into English!</p>;\n    }\n\n    return (\n      <div class=\"text-center\">\n        <Navbar\n          handleClick={this.handleClick}\n          buttonText={buttonText}\n        />\n        <SiteHeader\n          headerText={headerText}\n        />\n        {loadContent}\n        <Footer/>\n      </div>\n    );\n  }\n}\n\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <div id=\"nav\">\n        <nav class=\"navbar navbar-inverse\">\n          <div class=\"container-fluid\">\n            <NavHeader/>\n            <div class=\"collapse navbar-collapse\" id=\"myNavbar\">\n              <ul class=\"nav navbar-nav\">\n                <li><a>Traduce</a></li>\n                <li>\n                    <button onClick={this.props.handleClick}>\n                      {this.props.buttonText}\n                    </button>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nclass NavHeader extends Component {\n  render() {\n    return (\n      <div class=\"navbar-header\">\n        <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n        </button>\n        <img src={translate} />\n      </div>\n    );\n  }\n\n}\n    \n    \nclass SiteHeader extends Component {\n  render() {\n    return (\n        <div class=\"jumbotron\">\n          <div class=\"container text-center\">\n            <h1>Traduce!</h1>\n            <h2>The World's Premier solution for translating notes into english</h2>\n            {this.props.headerText}\n          </div>\n        </div>\n    );\n  }\n}\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    var text_in = JSON.stringify({\n      input_text: this.state.value,\n      language: \"blank\",\n      output_text: \"blank\",\n    });\n    alert('A New Phrase Was Submitted For Translation: ' + this.state.value);\n    fetch('http://django-env.6gwinyghki.us-east-1.elasticbeanstalk.com/api/translations/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: text_in\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div class=\"col-sm-12 well\">\n          <form role=\"form\" id=\"entry\" onSubmit={this.handleSubmit}>\n            <div class=\"form-group\">\n              <label>\n                <h4>Enter A Translation:</h4>\n                <textarea value={this.state.value} onChange={this.handleChange} class=\"form-control\" rows=\"3\" required />\n              </label>\n              <p>*Reminder: Traduce only translates INTO english FROM another language.</p>\n            </div>\n            <hr />\n            <button type=\"submit\" class=\"btn btn-success\" value=\"Submit\">Submit</button>\n          </form>\n      </div>\n    );\n  }\n}\n\nclass Table extends Component {\n  state = {\n    translations: []\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch('http://django-env.6gwinyghki.us-east-1.elasticbeanstalk.com/api/translations/');\n      const translations = await res.json();\n      this.setState({\n        translations\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"container well tables\">\n        <table id=\"entries\">\n          <tr>\n            <td>Entered Text</td>\n            <td>Language of Input</td>\n            <td>English Translation</td>\n          </tr>\n          {this.state.translations.map(item => (\n            <tr>\n              <td key={item.input_text}>{item.input_text}</td>\n              <td key={item.language}>{item.language}</td>\n              <td key={item.output_text}>{item.output_text}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div>\n        <footer class=\"container-fluid text-center footer\">\n          <div class=\"row\">\n            <h5>Thanks for using Traduce, A fun tool to play around\n          with foreign language translations with friends!</h5>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}