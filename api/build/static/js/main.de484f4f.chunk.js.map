{"version":3,"sources":["App.js","serviceWorker.js","index.js","translate.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","state","value","setState","react_default","a","createElement","id","src","translate","className","onClick","App_TextForm","App_Table","Component","TextForm","_this2","handleChange","handleSubmit","event","target","text_in","JSON","stringify","input_text","language","output_text","alert","fetch","method","headers","Accept","Content-Type","body","onSubmit","onChange","type","Table","translations","res","json","console","log","_context","t0","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.de484f4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport translate from './translate.svg';\nimport './App.css';\nimport ReactDOM from 'react-dom';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      value: -1\n    };\n  }\n\n  handleClick () {\n      this.setState({value: (-1*this.state.value)});\n  }\n\n  render () {\n    if (this.state.value === -1){\n      return(\n        <div>\n          <nav>\n            <div id=\"nav\">          \n            <img src={translate}></img>\n              <span>Traduce: the translation nation's number 1 notes board </span>\n                <div id=\"choices\" className=\"wideDiv\">\n                  <button onClick={this.handleClick}>See History</button>\n                </div>\n            </div>\n          </nav>\n          <div>\n            <TextForm />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.value === 1){\n      return (\n        <div>\n          <nav>\n          <div id=\"nav\">          \n            <img src={translate}></img>\n              <span>Traduce: the translation nation's number 1 notes board </span>\n                <div id=\"choices\" className=\"wideDiv\">\n              <button onClick={this.handleClick}>Translate</button>\n              </div>\n            </div>\n          </nav>\n          <div>\n            <Table />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\n\nclass TextForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'Please enter a new phrase.'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    var text_in = JSON.stringify({\n      input_text: this.state.value,\n      language: \"\",\n      output_text: \"\"\n    });\n    alert('A New Phrase Was Submitted For Translation: ' + this.state.value);\n    fetch('http://django-env.6gwinyghki.us-east-1.elasticbeanstalk.com/api/translations/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: text_in\n    });\n  }\n\n  render() {\n    return (\n      <form id=\"entry\" onSubmit={this.handleSubmit}>\n      \n        <label> \n          <div>\n            Enter Your Foreign Language Text Here:\n            <span></span>  \n          </div>\n          <span></span>  \n          <textarea value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\n// export default TextForm;\n\n\nclass Table extends Component {\n  state = {\n    translations: []\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch('http://django-env.6gwinyghki.us-east-1.elasticbeanstalk.com/api/translations/');\n      const translations = await res.json();\n      this.setState({\n        translations\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <table id=\"entries\">\n        <tr>\n            <td>Entered Text</td>\n            <td>Language of Input</td>\n            <td>English Translation</td>\n        </tr>\n       {this.state.translations.map(item => (\n        <tr>\n          <td key={item.input_text}>{item.input_text}</td>\n          <td key={item.language}>{item.language}</td>\n          <td key={item.output_text}>{item.output_text}</td>\n        </tr>\n      ))}\n      </table>\n    );\n  }\n}\n\n\nexport {App, TextForm, Table};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App, Table, TextForm} from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/translate.e327b575.svg\";"],"sourceRoot":""}